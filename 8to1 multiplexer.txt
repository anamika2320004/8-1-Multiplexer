//code 
module mux8to1 (
    input wire [7:0] d,    // 8 data inputs: d0 to d7
    input wire [2:0] sel,  // 3-bit select line
    output wire y          // MUX output
);

assign y = (sel == 3'b000) ? d[0] :
           (sel == 3'b001) ? d[1] :
           (sel == 3'b010) ? d[2] :
           (sel == 3'b011) ? d[3] :
           (sel == 3'b100) ? d[4] :
           (sel == 3'b101) ? d[5] :
           (sel == 3'b110) ? d[6] :
                              d[7]; // sel == 3'b111

endmodule


//Testbench
`timescale 1ns/1ps

module tb_mux8to1;

reg [7:0] d;
reg [2:0] sel;
wire y;

// Instantiate the 8:1 MUX
mux8to1 uut (
    .d(d),
    .sel(sel),
    .y(y)
);

initial begin
    // Initialize data inputs
    d = 8'b10101011;

    // Test all select lines
    sel = 3'b000; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b001; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b010; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b011; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b100; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b101; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b110; #10;
    $display("sel=%b, y=%b", sel, y);

    sel = 3'b111; #10;
    $display("sel=%b, y=%b", sel, y);

    $stop;
end

endmodule
